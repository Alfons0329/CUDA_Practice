==26870== Memcheck, a memory error detector
==26870== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==26870== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==26870== Command: ./gb_2D.o ../img_input/30K.jpg
==26870== 
==26870== Warning: noted but unhandled ioctl 0x30000001 with no size/direction hints.
==26870==    This could cause spurious value errors to appear.
==26870==    See README_MISSING_SYSCALL_OR_IOCTL for guidance on writing a proper wrapper.
==26870== Warning: noted but unhandled ioctl 0x27 with no size/direction hints.
==26870==    This could cause spurious value errors to appear.
==26870==    See README_MISSING_SYSCALL_OR_IOCTL for guidance on writing a proper wrapper.
==26870== Warning: noted but unhandled ioctl 0x25 with no size/direction hints.
==26870==    This could cause spurious value errors to appear.
==26870==    See README_MISSING_SYSCALL_OR_IOCTL for guidance on writing a proper wrapper.
==26870== Warning: noted but unhandled ioctl 0x17 with no size/direction hints.
==26870==    This could cause spurious value errors to appear.
==26870==    See README_MISSING_SYSCALL_OR_IOCTL for guidance on writing a proper wrapper.
==26870== Warning: set address range perms: large range [0x200000000, 0x300200000) (noaccess)
==26870== Warning: set address range perms: large range [0x1ecc9000, 0x3ecc8000) (noaccess)
==26870== Warning: set address range perms: large range [0x59e43040, 0xfad2eb58) (undefined)
==26870== Argument 'size' of function __builtin_vec_new has a fishy (possibly negative) value: -1594967296
==26870==    at 0x4C3089F: operator new[](unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==26870==    by 0x1113B0: img_read(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&, int&) (in /home/alfons/Desktop/programming/CUDA_Practice/Image_Processing/Gaussian_Blur/src/gb_2D.o)
==26870==    by 0x1108A4: main (in /home/alfons/Desktop/programming/CUDA_Practice/Image_Processing/Gaussian_Blur/src/gb_2D.o)
==26870== 
**26870** new/new[] failed and should throw an exception, but Valgrind
**26870**    cannot throw exceptions and so is aborting instead.  Sorry.
==26870==    at 0x4C2F81C: ??? (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==26870==    by 0x4C30915: operator new[](unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==26870==    by 0x1113B0: img_read(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, int&, int&) (in /home/alfons/Desktop/programming/CUDA_Practice/Image_Processing/Gaussian_Blur/src/gb_2D.o)
==26870==    by 0x1108A4: main (in /home/alfons/Desktop/programming/CUDA_Practice/Image_Processing/Gaussian_Blur/src/gb_2D.o)
==26870== 
==26870== HEAP SUMMARY:
==26870==     in use at exit: 2,705,313,732 bytes in 55,083 blocks
==26870==   total heap usage: 103,956 allocs, 48,873 frees, 2,708,399,600 bytes allocated
==26870== 
==26870== LEAK SUMMARY:
==26870==    definitely lost: 0 bytes in 0 blocks
==26870==    indirectly lost: 0 bytes in 0 blocks
==26870==      possibly lost: 2,700,409,271 bytes in 107 blocks
==26870==    still reachable: 4,904,461 bytes in 54,976 blocks
==26870==         suppressed: 0 bytes in 0 blocks
==26870== Rerun with --leak-check=full to see details of leaked memory
==26870== 
==26870== For counts of detected and suppressed errors, rerun with: -v
==26870== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
